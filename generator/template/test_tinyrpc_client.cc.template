/*************************************************************
 * 
 *  #####   ###   #     #    #		 #     #####    #####     ####
 *    #			 #    #	#	  #			#		#			 #  #	  	#		#		 #
 *    #			 #    #		# #				#				 ###			#####    #		
 *    #			###   #		  #				#				 #   #		#					####
 *
 * Generated by tinyrpc framework tinyrpc_generator.py
 * This file will not be overwrite althrough protobuf file changed !!!
 * Just write this file while not exist
 * File Name: ${FILE_NAME}
 * Create Time: ${CREATE_TIME}
 * Allow Edit: True
*************************************************************/


#include <google/protobuf/service.h>
#include <tinyrpc/net/tinypb/tinypb_rpc_channel.h>
#include <tinyrpc/net/tinypb/tinypb_rpc_async_channel.h>
#include <tinyrpc/net/tinypb/tinypb_rpc_controller.h>
#include <tinyrpc/net/tinypb/tinypb_rpc_closure.h>
#include <tinyrpc/net/net_address.h>
${INCLUDE_PB_HEADER}


void test_client() {

  tinyrpc::IPAddress::ptr addr = std::make_shared<tinyrpc::IPAddress>("127.0.0.1", 12345);

  tinyrpc::TinyPbRpcChannel channel(addr);
  ${STUBCLASS} stub(&channel);

  tinyrpc::TinyPbRpcController rpc_controller;
  rpc_controller.SetTimeout(5000);

  ${REQUEST_TYPE} rpc_req;
  ${RESPONSE_TYPE} rpc_res;

  std::cout << "Send to tinyrpc server " << addr->toString() << ", requeset body: " << rpc_req.ShortDebugString() << std::endl;
  stub.${METHOD_NAME}(&rpc_controller, &rpc_req, &rpc_res, NULL);

  if (rpc_controller.ErrorCode() != 0) {
    std::cout << "Failed to call tinyrpc server, error code: " << rpc_controller.ErrorCode() << ", error info: " << rpc_controller.ErrorText() << std::endl; 
    return;
  }

  std::cout << "Success get response from tinyrpc server " << addr->toString() << ", response body: " << rpc_res.ShortDebugString() << std::endl;

} 

int main(int argc, char* argv[]) {

  test_client();

  return 0;
}
